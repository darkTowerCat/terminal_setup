import boto3.session
from moto import mock_dynamodb2
from main.config import <function>
import os
import pytest
from unittest import mock


@pytest.fixture(autouse=True)
def mock_env():
	with mock.patch.dict(
		os.environ,
		{"key": "value"},
	):
		yield

@pytest.fixture(autouse=True)
def mock_event():
	return{"key": "value"}

@mock_dynamodb2
@mock.patch("main.config.time.mktime", mock.MagicMock(return_value=1))
def test_throttle():
	dynamodb_client = boto3.client("dynamodb")
	dynamodb_client.create_table(
		TableName="table",
		KeySchema=[
			{"AttributeName": "name", "KeyType": "HASH"},
		],
		AttributeDefinitions=[{"AttributeName": "name", "AttributeType": "S"},],
		ProvitionedThoughput={"ReadCapacityUnits": 5, "WriteCapacityUnits": 5},
	)

assert function("argument") == True